# --- VERSION FINAL CON TRASLAPE 03/06/2025 ---
# --- VISOR √âTNICO + AN√ÅLISIS DE TRASLAPE ---
# --- Miguel Guerrero & Kai ü§ñ ---

import streamlit as st
import geopandas as gpd
import pandas as pd
import zipfile
import tempfile
import os
import folium
import requests
import shutil
from io import BytesIO
from streamlit_folium import st_folium

st.set_page_config(page_title="Mapanima - Geovisor √âtnico", layout="wide")

# --- Estilos generales e institucionales ---
st.markdown("""
    <style>
    /* Estilos para la pantalla de login */
    .login-left {
        background-color: #c99c3b;
        padding: 3em;
        height: 100vh;
        color: black;
    }
    .login-right {
        background-color: #1b2e1b;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }
    .login-right img {
        max-width: 100%;
        max-height: 90%;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(255,255,255,0.3);
    }
    
    /* Estilos generales de la aplicaci√≥n */
    html, body, .stApp {
        background-color: #1b2e1b; /* Fondo verde oscuro */
        color: white;
        font-family: 'Inter', sans-serif;
    }
    section[data-testid="stSidebar"] {
        background-color: #c99c3b; /* Sidebar color institucional */
        color: black;
    }
    .stButton>button, .stDownloadButton>button {
        background-color: #346b34; /* Botones verde */
        color: white;
        border: none;
        border-radius: 6px;
    }
    /* Estilos para los campos de entrada */
    .stTextInput>div>div>input,
    .stSelectbox>div>div>div>input {
        color: black;
        background-color: white;
        border-radius: 4px;
    }
    /* Contorno para el mapa */
    .element-container:has(> iframe) {
        height: 650px !important;
        border: 2px solid #c99c3b; /* Contorno color institucional */
        border-radius: 8px;
    }
    /* Tooltips de Folium */
    .leaflet-tooltip {
        background-color: rgba(255, 255, 255, 0.9);
        color: black;
        font-weight: bold;
    }
    /* Dataframe de Streamlit */
    .stDataFrame {
        background-color: white;
        color: black;
        border-radius: 8px;
    }
    /* Botones de descarga espec√≠ficos */
    .stDownloadButton > button {
        background-color: #ffffff;
        color: #1b2e1b;
        border: 1px solid #346b34;
        border-radius: 6px;
        font-weight: bold;
    }
    /* Estilo para el pie de p√°gina fijo */
    .fixed-footer {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        text-align: center;
        padding: 10px 0;
        background-color: #1b2e1b; /* Fondo verde oscuro */
        color: #b0c9a8; /* Texto verde claro/gris */
        font-size: 0.8em;
        z-index: 1000; /* Asegura que est√© por encima de otros contenidos */
        border-top: 1px solid #346b34; /* Un borde sutil */
    }
    /* Estilo para etiquetas (labels) de los widgets */
    label {
        color: white !important;
        font-weight: bold;
    }
    </style>
""", unsafe_allow_html=True)

# --- Login b√°sico por seguridad institucional ---
usuario_valido = st.secrets["USUARIO"]
contrasena_valida = st.secrets["CONTRASENA"]

if "autenticado" not in st.session_state or not st.session_state["autenticado"]:
    col1, col2 = st.columns([1, 2], gap="large")

    with col1:
        st.markdown("<h2>üîê Acceso restringido</h2>", unsafe_allow_html=True)
        usuario = st.text_input("Usuario")
        contrasena = st.text_input("Contrase√±a", type="password")
        if st.button("Ingresar"):
            if usuario.strip().upper() == usuario_valido.strip().upper() and contrasena.strip() == contrasena_valida.strip():
                st.session_state["autenticado"] = True
                st.rerun()
            else:
                st.error("Usuario o contrase√±a incorrectos")

    with col2:
        st.image("Mapa1.png", use_container_width=True)
        st.markdown(
            """
            <div style='padding-top: 1em; font-size: 16px; color: white; text-align: justify;'>
                <p>
                    Bienvenido al visor <strong>Mapanima</strong>. 
                </p>
                <p>
                    Mapanima nace de la fusi√≥n entre ‚Äúmapa‚Äù y ‚Äú√°nima‚Äù, evocando no solo la representaci√≥n gr√°fica de un territorio, sino su alma, su energ√≠a viva. Este nombre es una met√°fora del territorio, comprendido no como una extensi√≥n vac√≠a delimitada por coordenadas, sino como un espacio sagrado, habitado, sentido y narrado por los pueblos originarios.
                </p>
                <p>
                    Mapanima honra la cosmovisi√≥n √©tnica, donde la tierra tiene memoria, esp√≠ritu y dignidad; donde cada r√≠o, monta√±a y sendero guarda historias ancestrales. As√≠, este visor no solo muestra informaci√≥n geogr√°fica: revela un territorio vivo, que respira y se defiende.
                </p>
                <p style='margin-top: 2em; font-style: italic; color: #b0c9a8;'>
                    Desarrollo del equipo de Geoan√°lisis √âtnico ‚Äì DAE<br>
                    Unidad de Restituci√≥n de Tierras
                </p>
            </div>
            """,
            unsafe_allow_html=True
        )
        st.image("GEOVISOR.png", width=160)
    
    # --- Footer para la pantalla de login ---
    st.markdown(
        """
        <div class="fixed-footer">
            Realizado por Ing. Topogr√°fico Luis Miguel Guerrero | ¬© 2025. Contacto: luis.guerrero@urt.gov.co
        </div>
        """,
        unsafe_allow_html=True
    )
    st.stop()

# --- Funci√≥n para descargar y cargar archivos ZIP de shapefiles ---
@st.cache_data
def descargar_y_cargar_zip(url):
    try:
        # A√±ade un spinner para la carga inicial del ZIP
        with st.spinner("Cargando datos geogr√°ficos principales... Esto puede tardar unos segundos."):
            r = requests.get(url)
            r.raise_for_status() # Lanza una excepci√≥n para errores HTTP (4xx o 5xx)
            with zipfile.ZipFile(BytesIO(r.content)) as zip_ref:
                with tempfile.TemporaryDirectory() as tmpdir:
                    zip_ref.extractall(tmpdir)
                    shp_path = [os.path.join(tmpdir, f) for f in os.listdir(tmpdir) if f.endswith(".shp")]
                    if not shp_path:
                        st.error("‚ùå Error: No se encontr√≥ ning√∫n archivo .shp en el ZIP descargado. Aseg√∫rate de que el ZIP contenga un shapefile v√°lido.")
                        return None
                    
                    gdf = None
                    try:
                        gdf = gpd.read_file(shp_path[0])
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Advertencia: Error al cargar shapefile con encoding predeterminado. Intentando con 'latin1'. (Detalle: {e})")
                        try:
                            gdf = gpd.read_file(shp_path[0], encoding='latin1')
                        except Exception as e_latin1:
                            st.error(f"‚ùå Error cr√≠tico: No se pudo cargar el shapefile ni con encoding predeterminado ni con 'latin1'. (Detalle: {e_latin1})")
                            return None
                    
                    # Asegurarse de que el GeoDataFrame est√© en CRS 4326 para Folium
                    if gdf is not None and gdf.crs != "EPSG:4326":
                        st.info("‚ÑπÔ∏è Reproyectando datos a EPSG:4326 para compatibilidad con el mapa.")
                        gdf = gdf.to_crs(epsg=4326)
                    
                    # Asegurar que 'area_ha' sea num√©rica y sin NaN para los c√°lculos
                    if gdf is not None and 'area_ha' in gdf.columns:
                        gdf['area_ha'] = pd.to_numeric(gdf['area_ha'], errors='coerce').fillna(0)
                    elif gdf is not None:
                        # Si no existe 'area_ha', calcularla a partir de la geometr√≠a para los c√°lculos de porcentaje de traslape
                        # Nota: el c√°lculo de √°rea en CRS 4326 (lat/lon) es aproximado. Para precisi√≥n, reproyectar a un CRS local.
                        # Aqu√≠ se usa el mismo factor de conversi√≥n que ya manejabas.
                        gdf['area_ha'] = gdf.geometry.area * 12365.1613 
                        st.warning("‚ö†Ô∏è La columna 'area_ha' no fue encontrada. Se calcul√≥ el √°rea en hect√°reas de los pol√≠gonos.")

                    # Rellenar valores NaN con una cadena vac√≠a y luego convertir todas las columnas no geom√©tricas a tipo string
                    if gdf is not None:
                        for col in gdf.columns:
                            if col != gdf.geometry.name and col != 'area_ha': # No afectar 'area_ha'
                                gdf[col] = gdf[col].fillna('').astype(str) 

                    return gdf

    except requests.exceptions.HTTPError as e:
        st.error(f"‚ùå Error HTTP al descargar el archivo ZIP: {e}. Por favor, verifica la URL y tu conexi√≥n a internet.")
        return None
    except requests.exceptions.ConnectionError as e:
        st.error(f"‚ùå Error de conexi√≥n al descargar el archivo ZIP: {e}. Aseg√∫rate de tener conexi√≥n a internet.")
        return None
    except zipfile.BadZipFile:
        st.error("‚ùå El archivo descargado no es un ZIP v√°lido. Aseg√∫rate de que la URL apunte a un archivo ZIP.")
        return None
    except Exception as e:
        st.error(f"‚ùå Error inesperado al cargar el archivo ZIP: {e}. Por favor, contacta al soporte.")
        return None

def onedrive_a_directo(url_onedrive):
    if "1drv.ms" in url_onedrive:
        try:
            r = requests.get(url_onedrive, allow_redirects=True, timeout=10) # A√±adir timeout
            r.raise_for_status()
            return r.url.replace("redir?", "download?").replace("redir=", "download=")
        except requests.exceptions.RequestException as e:
            st.error(f"‚ùå Error al convertir URL de OneDrive a directa: {e}. Aseg√∫rate de que la URL sea v√°lida y accesible.")
            return url_onedrive # Retorna la original si falla la conversi√≥n
    return url_onedrive

# --- Cargar datos principales ---
url_zip = onedrive_a_directo(st.secrets["URL_ZIP"])
gdf_total = descargar_y_cargar_zip(url_zip)

# --- Banner superior del visor ya autenticado ---
with st.container():
    st.image("GEOVISOR.png", use_container_width=True)

# --- PESTA√ëAS ---
tabs = st.tabs(["üó∫Ô∏è Visor principal", "üìê An√°lisis de traslape"])

# --- VISOR PRINCIPAL ---
with tabs[0]:
    if gdf_total is None:
        st.warning("‚ö†Ô∏è No se pudieron cargar los datos geogr√°ficos principales. El visor no puede funcionar sin ellos.")
        st.stop() # Detiene la ejecuci√≥n si los datos principales no se cargaron

    st.subheader("üó∫Ô∏è Visor de territorios √©tnicos")
    st.markdown("Filtros, mapa y descarga de informaci√≥n cartogr√°fica seg√∫n filtros aplicados.")

    # Continuar solo si gdf_total se carg√≥ correctamente
    # Normalizar algunas columnas para filtrado consistente
    # Aseg√∫rate de que estas columnas existan en tu gdf_total
    for col_name in ['etapa', 'estado_act', 'cn_ci', 'departamen', 'nom_terr', 'id_rtdaf', 'tipologia']:
        if col_name in gdf_total.columns:
            gdf_total[col_name] = gdf_total[col_name].astype(str).str.lower().fillna('')
        else:
            # st.warning(f"La columna '{col_name}' no se encuentra en los datos principales. Los filtros relacionados no funcionar√°n.")
            # Crear una columna vac√≠a para evitar errores si no existe
            gdf_total[col_name] = '' 
    
    st.sidebar.header("üéØ Filtros")
    etapa_sel = st.sidebar.multiselect("Filtrar por etapa", sorted(gdf_total['etapa'].unique()))
    estado_sel = st.sidebar.multiselect("Filtrar por estado del caso", sorted(gdf_total['estado_act'].unique()))
    tipo_sel = st.sidebar.multiselect("Filtrar por tipo de territorio", sorted(gdf_total['cn_ci'].unique()))
    depto_sel = st.sidebar.multiselect("Filtrar por departamento", sorted(gdf_total['departamen'].unique()))
    
    nombre_opciones = sorted(gdf_total['nom_terr'].unique())
    nombre_seleccionado = st.sidebar.selectbox("üîç Buscar por nombre (nom_terr)", options=[""] + nombre_opciones)
    id_buscar = st.sidebar.text_input("üîç Buscar por ID (id_rtdaf)")

    fondos_disponibles = {
        "OpenStreetMap": "OpenStreetMap",
        "CartoDB Claro (Positron)": "CartoDB positron",
        "CartoDB Oscuro": "CartoDB dark_matter",
        "Sat√©lite (Esri)": "Esri.WorldImagery",
        "Esri NatGeo World Map": "Esri.NatGeoWorldMap",
        "Esri World Topo Map": "Esri.WorldTopoMap"
    }
    fondo_seleccionado = st.sidebar.selectbox("üó∫Ô∏è Fondo del mapa", list(fondos_disponibles.keys()), index=1)

    # --- Opci√≥n para mostrar/ocultar relleno de pol√≠gonos ---
    st.sidebar.header("üé® Estilos del Mapa")
    mostrar_relleno = st.sidebar.checkbox("Mostrar relleno de pol√≠gonos", value=True)

    st.sidebar.header("‚öôÔ∏è Rendimiento")
    usar_simplify = st.sidebar.checkbox("Simplificar geometr√≠a", value=True)
    tolerancia = st.sidebar.slider("Nivel de simplificaci√≥n", 0.00001, 0.001, 0.0001, step=0.00001, format="%.5f")

    # Usar st.session_state para controlar cu√°ndo se muestra el mapa
    if "mostrar_mapa" not in st.session_state:
        st.session_state["mostrar_mapa"] = False

    col_botones = st.sidebar.columns(2)
    with col_botones[0]:
        if st.button("üß≠ Aplicar filtros y mostrar mapa"):
            st.session_state["mostrar_mapa"] = True
    with col_botones[1]:
        if st.button("üîÑ Reiniciar visor"):
            st.session_state["mostrar_mapa"] = False
            st.rerun()

    if st.session_state["mostrar_mapa"]:
        gdf_filtrado = gdf_total.copy()
        
        # Aplicar filtros
        if etapa_sel:
            gdf_filtrado = gdf_filtrado[gdf_filtrado["etapa"].isin(etapa_sel)]
        if estado_sel:
            gdf_filtrado = gdf_filtrado[gdf_filtrado["estado_act"].isin(estado_sel)]
        if tipo_sel:
            gdf_filtrado = gdf_filtrado[gdf_filtrado["cn_ci"].isin(tipo_sel)]
        if depto_sel:
            gdf_filtrado = gdf_filtrado[gdf_filtrado["departamen"].isin(depto_sel)]
        
        # Filtro de texto para ID
        if id_buscar:
            # Aseg√∫rate de que 'id_rtdaf' sea string para usar .contains
            gdf_filtrado = gdf_filtrado[gdf_filtrado["id_rtdaf"].astype(str).str.contains(id_buscar, case=False, na=False)]
        
        # Filtro de selecci√≥n para nombre
        if nombre_seleccionado and nombre_seleccionado != "":
            gdf_filtrado = gdf_filtrado[gdf_filtrado["nom_terr"] == nombre_seleccionado]

        # Simplificar geometr√≠a si se seleccion√≥
        if usar_simplify and not gdf_filtrado.empty:
            st.info(f"Geometr√≠as simplificadas con tolerancia de {tolerancia}")
            gdf_filtrado["geometry"] = gdf_filtrado["geometry"].simplify(tolerancia, preserve_topology=True)

        st.subheader("üó∫Ô∏è Mapa filtrado")

        if not gdf_filtrado.empty:
            # Formatear el √°rea para el tooltip
            gdf_filtrado["area_formateada"] = gdf_filtrado["area_ha"].apply(
                lambda ha: f"{int(ha)} ha + {int(round((ha - int(ha)) * 10000)):,} m¬≤" if ha >= 0 else "N/A"
            )

            # Recalcular centroide y l√≠mites para el mapa
            bounds = gdf_filtrado.total_bounds
            centro_lat = (bounds[1] + bounds[3]) / 2
            centro_lon = (bounds[0] + bounds[2]) / 2
            
            with st.spinner("Generando mapa..."):
                m = folium.Map(location=[centro_lat, centro_lon], zoom_start=8, tiles=fondos_disponibles[fondo_seleccionado])

                # Funci√≥n de estilo para la capa principal
                def style_function_by_tipo(feature):
                    tipo = feature["properties"].get("cn_ci", "").lower() # Usar .get y lower para seguridad
                    color_borde = "#228B22" if tipo == "ci" else "#8B4513" # Verde para CI, Marr√≥n para CN
                    color_relleno = color_borde # Mismo color para relleno
                    opacidad_relleno = 0.6 if mostrar_relleno else 0 # Controla la opacidad del relleno
                    return {"fillColor": color_relleno, "color": color_borde, "weight": 1.5, "fillOpacity": opacidad_relleno}

                folium.GeoJson(
                    gdf_filtrado,
                    name="Territorios √âtnicos",
                    style_function=style_function_by_tipo,
                    tooltip=folium.GeoJsonTooltip(
                        fields=["id_rtdaf", "nom_terr", "etnia", "departamen", "municipio", "etapa", "estado_act", "tipologia", "area_formateada"],
                        aliases=["ID:", "Territorio:", "Etnia:", "Departamento:", "Municipio:", "Etapa:", "Estado:", "Tipolog√≠a:", "√Årea:"],
                        localize=True
                    )
                ).add_to(m)

                # Ajustar el zoom del mapa para que se ajuste a los l√≠mites de los datos filtrados
                m.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])

                # A√±adir leyenda
                leyenda_html = '''
                <div style="position: absolute; bottom: 10px; right: 10px; z-index: 9999;
                            background-color: white; padding: 10px; border: 1px solid #ccc;
                            font-size: 14px; box-shadow: 2px 2px 4px rgba(0,0,0,0.1);">
                    <strong>Leyenda</strong><br>
                    <i style="background:#228B22; opacity:0.7; width:10px; height:10px; display:inline-block; border:1px solid #228B22;"></i> Comunidades Ind√≠genas (CI)<br>
                    <i style="background:#8B4513; opacity:0.7; width:10px; height:10px; display:inline-block; border:1px solid #8B4513;"></i> Comunidades Negras (CN)<br>
                </div>
                '''
                m.get_root().html.add_child(folium.Element(leyenda_html))

                st_folium(m, width=1200, height=600)
        else:
            st.warning("‚ö†Ô∏è No se encontraron territorios que coincidan con los filtros aplicados. Por favor, ajusta tus selecciones.")

        st.subheader("üìã Resultados filtrados")
        if not gdf_filtrado.empty:
            st.dataframe(gdf_filtrado.drop(columns=["geometry", "area_formateada"]))

            # Estad√≠sticas
            total_territorios = len(gdf_filtrado)
            area_total = gdf_filtrado["area_ha"].sum()
            hectareas = int(area_total)
            metros2 = int(round((area_total - hectareas) * 10000))
            cuenta_ci = (gdf_filtrado["cn_ci"] == "ci").sum()
            cuenta_cn = (gdf_filtrado["cn_ci"] == "cn").sum()

            st.markdown(
                f'''
                <div style='
                    margin-top: 1em;
                    margin-bottom: 1.5em;
                    padding: 0.7em;
                    background-color: #e8f5e9;
                    border-radius: 8px;
                    font-size: 16px;
                    color: #2e7d32;'>
                    <strong>üìä Estad√≠sticas del resultado:</strong><br>
                    Territorios filtrados: <strong>{total_territorios}</strong><br>
                    ‚ñ∏ Comunidades ind√≠genas (ci): <strong>{cuenta_ci}</strong><br>
                    ‚ñ∏ Consejos comunitarios (cn): <strong>{cuenta_cn}</strong><br>
                    √Årea Cartogr√°fica: <strong>{hectareas} ha + {metros2:} m¬≤</strong>
                </div>
                ''',
                unsafe_allow_html=True
            )
            with st.expander("üì• Opciones de descarga"):
                # Descargar shapefile filtrado como ZIP
                with tempfile.TemporaryDirectory() as tmpdir:
                    gdf_filtrado_for_save = gdf_filtrado.copy()
                    if gdf_filtrado_for_save.crs is None:
                        gdf_filtrado_for_save.set_crs(epsg=4326, inplace=True) 

                    shp_base_path = os.path.join(tmpdir, "territorios_filtrados")
                    gdf_filtrado_for_save.to_file(shp_base_path + ".shp") 

                    zip_output_path = shutil.make_archive(shp_base_path, 'zip', tmpdir)
                    
                    with open(zip_output_path, "rb") as f:
                        st.download_button(
                            label="üìÖ Descargar shapefile filtrado (.zip)",
                            data=f.read(),
                            file_name="territorios_filtrados.zip",
                            mime="application/zip"
                        )

                # Descargar mapa como HTML
                html_bytes = m.get_root().render().encode("utf-8")
                st.download_button(
                    label="üåê Descargar mapa (HTML)",
                    data=html_bytes,
                    file_name="mapa_filtrado.html",
                    mime="text/html"
                )

                # Descargar resultados como CSV
                csv_data = gdf_filtrado.drop(columns=["geometry", "area_formateada"]).to_csv(index=False).encode("utf-8")
                st.download_button(
                    label="üìÑ Descargar tabla como CSV",
                    data=csv_data,
                    file_name="resultados_filtrados.csv",
                    mime="text/csv"
                )
        else:
            st.info("No hay datos para mostrar en la tabla o descargar con los filtros actuales.")

# --- AN√ÅLISIS DE TRASLAPE ---
with tabs[1]:
    st.subheader("üìê An√°lisis de traslape entre tu shapefile y los territorios √©tnicos")

    archivo_zip = st.file_uploader("üìÇ Carga un shapefile en formato .zip", type=["zip"])

    if archivo_zip is not None:
        with st.spinner("Procesando shapefile del usuario..."):
            with tempfile.TemporaryDirectory() as tmpdir:
                zip_path = os.path.join(tmpdir, "archivo.zip")
                with open(zip_path, "wb") as f:
                    f.write(archivo_zip.read())
                with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                    zip_ref.extractall(tmpdir)
                shp_files = [os.path.join(tmpdir, f) for f in os.listdir(tmpdir) if f.endswith(".shp")]

                if shp_files:
                    try:
                        gdf_usuario = gpd.read_file(shp_files[0])
                        if gdf_usuario.crs != "EPSG:4326":
                            st.info("‚ÑπÔ∏è Reproyectando shapefile del usuario a EPSG:4326.")
                            gdf_usuario = gdf_usuario.to_crs(epsg=4326)

                        # Asegurarse de que gdf_total no sea None antes de la operaci√≥n de overlay
                        if gdf_total is None:
                            st.error("‚ùå Los datos principales del visor no se cargaron, no se puede realizar el an√°lisis de traslape.")
                            st.stop() # Detener la ejecuci√≥n si no hay datos principales
                        
                        # Guardar el √°rea original del territorio √©tnico para el c√°lculo del porcentaje de traslape
                        # Es crucial que 'id_rtdaf' (o un ID √∫nico) exista en gdf_total para el merge.
                        # Si no tienes 'id_rtdaf' o un ID √∫nico, necesitar√°s adaptar esta parte.
                        gdf_total_areas = gdf_total[['id_rtdaf', 'area_ha']].copy()
                        gdf_total_areas.rename(columns={'area_ha': 'area_original_ha'}, inplace=True)
                        
                        # Realizar la intersecci√≥n
                        gdf_interseccion = gpd.overlay(gdf_usuario, gdf_total, how="intersection")

                        if not gdf_interseccion.empty:
                            # Calcular √°rea en hect√°reas para la intersecci√≥n
                            gdf_interseccion["area_traslape_ha"] = gdf_interseccion.geometry.area * 12365.1613
                            gdf_interseccion["area_traslape_ha"] = gdf_interseccion["area_traslape_ha"].round(2)

                            # Fusionar con las √°reas originales de los territorios √©tnicos
                            # Usamos `id_rtdaf` como clave de fusi√≥n. Si no tienes un ID √∫nico, esto debe adaptarse.
                            gdf_interseccion = pd.merge(
                                gdf_interseccion,
                                gdf_total_areas,
                                on='id_rtdaf', # Reemplaza con el ID √∫nico de tus territorios √©tnicos
                                how='left'
                            )

                            # Calcular el porcentaje de traslape
                            gdf_interseccion['porc_traslape'] = (
                                (gdf_interseccion['area_traslape_ha'] / gdf_interseccion['area_original_ha']) * 100
                            ).round(2).fillna(0) # Manejar divisi√≥n por cero o NaN
                            gdf_interseccion['porc_traslape_str'] = gdf_interseccion['porc_traslape'].astype(str) + '%'

                            st.success(f"üîç Se encontraron {len(gdf_interseccion)} intersecciones.")

                            # Centrar el mapa para mostrar todas las capas relevantes
                            # Combinar los bounds de gdf_usuario y gdf_total para un centrado adecuado
                            combined_bounds = pd.concat([gdf_usuario, gdf_total]).total_bounds
                            
                            m_inter = folium.Map(
                                location=[(combined_bounds[1] + combined_bounds[3]) / 2, (combined_bounds[0] + combined_bounds[2]) / 2],
                                zoom_start=8,
                                tiles="CartoDB positron"
                            )
                            
                            # 1. A√±adir el shapefile del usuario (primera capa, en gris)
                            folium.GeoJson(
                                gdf_usuario, 
                                name="Shapefile del usuario",
                                style_function=lambda x: {"fillColor": "gray", "color": "gray", "weight": 1, "fillOpacity": 0.3}
                            ).add_to(m_inter)

                            # 2. A√±adir los territorios √©tnicos completos (segunda capa, con borde delgado y relleno casi transparente)
                            # Se usa gdf_total filtrado por los IDs de los territorios con intersecci√≥n
                            # Esto asegura que solo se dibujen los territorios √©tnicos que tienen un traslape.
                            ids_con_traslape = gdf_interseccion['id_rtdaf'].unique()
                            gdf_territorios_afectados = gdf_total[gdf_total['id_rtdaf'].isin(ids_con_traslape)]

                            folium.GeoJson(
                                gdf_territorios_afectados,
                                name="Territorios √©tnicos afectados",
                                style_function=lambda x: {
                                    "fillColor": "#346b34", # Un verde m√°s oscuro, color institucional
                                    "color": "#346b34",
                                    "weight": 2, # Borde un poco m√°s grueso para distinguirlo
                                    "fillOpacity": 0.1 # Muy transparente para ver la intersecci√≥n encima
                                },
                                tooltip=folium.GeoJsonTooltip(
                                    fields=["nom_terr", "etnia", "area_original_ha"], # Muestra el √°rea original
                                    aliases=["Territorio:", "Etnia:", "√Årea Original (ha):"]
                                )
                            ).add_to(m_inter)


                            # 3. A√±adir las intersecciones (tercera capa, en rojo, con relleno m√°s opaco)
                            folium.GeoJson(
                                gdf_interseccion,
                                name="√Åreas de traslape",
                                style_function=lambda x: {"fillColor": "red", "color": "red", "weight": 1.5, "fillOpacity": 0.7},
                                tooltip=folium.GeoJsonTooltip(
                                    fields=["nom_terr", "etnia", "area_traslape_ha", "porc_traslape_str"],
                                    aliases=["Territorio:", "Etnia:", "√Årea traslapada (ha):", "Porcentaje traslapado:"],
                                    localize=True
                                )
                            ).add_to(m_inter)
                            
                            # A√±adir control de capas
                            folium.LayerControl().add_to(m_inter)

                            # Ajustar el mapa a los l√≠mites combinados de todas las capas
                            m_inter.fit_bounds([[combined_bounds[1], combined_bounds[0]], [combined_bounds[3], combined_bounds[2]]])

                            st_folium(m_inter, width=1100, height=600)

                            st.markdown("### üìã Tabla de intersecci√≥n")
                            # Columnas a mostrar en la tabla de resultados
                            cols_to_display = [
                                "id_rtdaf", # ID del territorio √©tnico
                                "nom_terr",
                                "etnia",
                                "departamen",
                                "municipio",
                                "area_original_ha",
                                "area_traslape_ha",
                                "porc_traslape_str"
                            ]
                            # Aseg√∫rate de que todas las columnas existan antes de seleccionarlas
                            cols_to_display = [col for col in cols_to_display if col in gdf_interseccion.columns]
                            
                            st.dataframe(gdf_interseccion[cols_to_display])

                            csv_inter = gdf_interseccion[cols_to_display].to_csv(index=False).encode("utf-8")
                            st.download_button("üíæ Descargar resultados como CSV", csv_inter, "intersecciones.csv", "text/csv")
                        else:
                            st.warning("No se encontraron intersecciones entre tu shapefile y los territorios cargados.")
                    except Exception as e:
                        st.error(f"‚ùå Error al procesar el shapefile del usuario o al realizar el an√°lisis de traslape: {e}")
                        st.exception(e) # Esto mostrar√° el traceback completo para depuraci√≥n
                else:
                    st.error("No se encontr√≥ ning√∫n archivo .shp dentro del ZIP cargado. Aseg√∫rate de que el ZIP contenga un shapefile v√°lido.")

# --- Footer global para la pantalla principal del visor ---
st.markdown(
    """
    <div class="fixed-footer">
        Realizado por Ing. Topogr√°fico Luis Miguel Guerrero | ¬© 2025. Contacto: luis.guerrero@urt.gov.co
    </div>
    """,
    unsafe_allow_html=True
)
